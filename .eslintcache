[{"/Users/ahnjaewoo/Desktop/submit-practice/src/index.js":"1","/Users/ahnjaewoo/Desktop/submit-practice/src/App.js":"2","/Users/ahnjaewoo/Desktop/submit-practice/src/components/SimpleInput.js":"3","/Users/ahnjaewoo/Desktop/submit-practice/src/hooks/use-input.js":"4","/Users/ahnjaewoo/Desktop/submit-practice/src/components/BasicForm.js":"5"},{"size":142,"mtime":1616595887000,"results":"6","hashOfConfig":"7"},{"size":214,"mtime":1644561996754,"results":"8","hashOfConfig":"7"},{"size":2093,"mtime":1644560049641,"results":"9","hashOfConfig":"7"},{"size":685,"mtime":1644484268098,"results":"10","hashOfConfig":"7"},{"size":3146,"mtime":1644561974222,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"pzek46",{"filePath":"15","messages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"17","messages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19"},{"filePath":"20","messages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"22","messages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/ahnjaewoo/Desktop/submit-practice/src/index.js",[],["24","25"],"/Users/ahnjaewoo/Desktop/submit-practice/src/App.js",["26"],"/Users/ahnjaewoo/Desktop/submit-practice/src/components/SimpleInput.js",["27"],"import {useState} from \"react\";\nimport useInput from \"../hooks/use-input\";\n\nconst SimpleInput = (props) => {\n  const {\n    value: enteredName,\n    hasError: nameInputHasError,\n    isValid: enteredNameIsValid,\n    valueChangeHandler: nameChangedHandler,\n    inputBlurHandler: nameBlurHandler,\n    reset: resetNameInput,\n  } = useInput((value) => value.trim() !== \"\");\n\n  const {\n    value: enteredEmail,\n    hasError: EmailInputHasError,\n    isValid: enteredEmailIsValid,\n    valueChangeHandler: emailChangedHandler,\n    inputBlurHandler: emailBlurHandler,\n    reset: resetEmailInput,\n  } = useInput((value) => value.includes(\"@\"));\n\n  let formIsValid = false;\n\n  if (enteredNameIsValid && enteredEmailIsValid) {\n    formIsValid = true;\n  }\n\n  const formSubmissionHandler = (e) => {\n    e.preventDefault();\n\n    if (!enteredNameIsValid) {\n      return;\n    }\n\n    resetNameInput();\n\n    resetEmailInput();\n  };\n\n  const nameInputClasses = nameInputHasError\n    ? \"form-control invalid\"\n    : \"form-control\";\n\n  const emailInputClasses = EmailInputHasError\n    ? \"form-control invalid\"\n    : \"form-control\";\n\n  return (\n    <form onSubmit={formSubmissionHandler}>\n      <div className={nameInputClasses}>\n        <label htmlFor=\"name\">Your Name</label>\n        <input\n          type=\"text\"\n          id=\"name\"\n          onBlur={nameBlurHandler}\n          onChange={nameChangedHandler}\n          value={enteredName}\n        />\n        {nameInputHasError && (\n          <p className=\"error-text\">Name must not be empty</p>\n        )}\n      </div>\n      <div className={emailInputClasses}>\n        <label htmlFor=\"email\">Your E-mail</label>\n        <input\n          type=\"text\"\n          id=\"email\"\n          onBlur={emailBlurHandler}\n          onChange={emailChangedHandler}\n          value={enteredEmail}\n        />\n        {EmailInputHasError && (\n          <p className=\"error-text\">Please enter a valid E-mail</p>\n        )}\n      </div>\n      <div className=\"form-actions\">\n        <button disabled={!formIsValid}>Submit</button>\n      </div>\n    </form>\n  );\n};\n\nexport default SimpleInput;\n","/Users/ahnjaewoo/Desktop/submit-practice/src/hooks/use-input.js",[],"/Users/ahnjaewoo/Desktop/submit-practice/src/components/BasicForm.js",[],{"ruleId":"28","replacedBy":"29"},{"ruleId":"30","replacedBy":"31"},{"ruleId":"32","severity":1,"message":"33","line":2,"column":8,"nodeType":"34","messageId":"35","endLine":2,"endColumn":19},{"ruleId":"32","severity":1,"message":"36","line":1,"column":9,"nodeType":"34","messageId":"35","endLine":1,"endColumn":17},"no-native-reassign",["37"],"no-negated-in-lhs",["38"],"no-unused-vars","'SimpleInput' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","no-global-assign","no-unsafe-negation"]